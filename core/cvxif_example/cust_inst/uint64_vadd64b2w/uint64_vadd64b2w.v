// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="uint64_vadd64b2w_uint64_vadd64b2w,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.357000,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=4,HLS_SYN_LUT=128,HLS_VERSION=2023_2}" *)

module uint64_vadd64b2w (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_dout,
        in1_empty_n,
        in1_read,
        in2_dout,
        in2_empty_n,
        in2_read,
        out_r_din,
        out_r_full_n,
        out_r_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] in1_dout;
input   in1_empty_n;
output   in1_read;
input  [63:0] in2_dout;
input   in2_empty_n;
output   in2_read;
output  [63:0] out_r_din;
input   out_r_full_n;
output   out_r_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in1_read;
reg in2_read;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in1_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    in2_blk_n;
reg    out_r_blk_n;
wire    ap_CS_fsm_state4;
reg    ap_block_state2;
reg    ap_block_state3;
wire    regslice_forward_out_r_U_apdone_blk;
reg    ap_block_state4;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    regslice_forward_in1_U_apdone_blk;
wire   [63:0] in1_dout_int_regslice;
wire    in1_empty_n_int_regslice;
reg    in1_read_int_regslice;
wire    regslice_forward_in1_U_ack_in;
wire    regslice_forward_in2_U_apdone_blk;
wire   [63:0] in2_dout_int_regslice;
wire    in2_empty_n_int_regslice;
reg    in2_read_int_regslice;
wire    regslice_forward_in2_U_ack_in;
wire   [63:0] out_r_din_int_regslice;
reg    out_r_write_int_regslice;
wire    out_r_full_n_int_regslice;
wire    regslice_forward_out_r_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

uint64_vadd64b2w_regslice_forward #(
    .DataWidth( 64 ))
regslice_forward_in1_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_dout),
    .vld_in(in1_empty_n),
    .ack_in(regslice_forward_in1_U_ack_in),
    .data_out(in1_dout_int_regslice),
    .vld_out(in1_empty_n_int_regslice),
    .ack_out(in1_read_int_regslice),
    .apdone_blk(regslice_forward_in1_U_apdone_blk)
);

uint64_vadd64b2w_regslice_forward #(
    .DataWidth( 64 ))
regslice_forward_in2_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_dout),
    .vld_in(in2_empty_n),
    .ack_in(regslice_forward_in2_U_ack_in),
    .data_out(in2_dout_int_regslice),
    .vld_out(in2_empty_n_int_regslice),
    .ack_out(in2_read_int_regslice),
    .apdone_blk(regslice_forward_in2_U_apdone_blk)
);

uint64_vadd64b2w_regslice_forward #(
    .DataWidth( 64 ))
regslice_forward_out_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_r_din_int_regslice),
    .vld_in(out_r_write_int_regslice),
    .ack_in(out_r_full_n_int_regslice),
    .data_out(out_r_din),
    .vld_out(regslice_forward_out_r_U_vld_out),
    .ack_out(out_r_full_n),
    .apdone_blk(regslice_forward_out_r_U_apdone_blk)
);

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state3)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state4)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        in1_blk_n = in1_empty_n_int_regslice;
    end else begin
        in1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in1_empty_n == 1'b1) & (regslice_forward_in1_U_ack_in == 1'b1))) begin
        in1_read = 1'b1;
    end else begin
        in1_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2)))) begin
        in1_read_int_regslice = 1'b1;
    end else begin
        in1_read_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        in2_blk_n = in2_empty_n_int_regslice;
    end else begin
        in2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((in2_empty_n == 1'b1) & (regslice_forward_in2_U_ack_in == 1'b1))) begin
        in2_read = 1'b1;
    end else begin
        in2_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2)))) begin
        in2_read_int_regslice = 1'b1;
    end else begin
        in2_read_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        out_r_blk_n = out_r_full_n_int_regslice;
    end else begin
        out_r_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3)) | ((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2)))) begin
        out_r_write_int_regslice = 1'b1;
    end else begin
        out_r_write_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state2 = ((out_r_full_n_int_regslice == 1'b0) | (in2_empty_n_int_regslice == 1'b0) | (in1_empty_n_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state3 = ((out_r_full_n_int_regslice == 1'b0) | (in2_empty_n_int_regslice == 1'b0) | (in1_empty_n_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state4 = ((regslice_forward_out_r_U_apdone_blk == 1'b1) | (out_r_full_n_int_regslice == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign out_r_din_int_regslice = (in2_dout_int_regslice + in1_dout_int_regslice);

assign out_r_write = regslice_forward_out_r_U_vld_out;

endmodule //uint64_vadd64b2w
