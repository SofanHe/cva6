// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="t64_CAG444toRGB888_k8_t64_CAG444toRGB888_k8,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k325t-ffg900-2,HLS_INPUT_CLOCK=100.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.403833,HLS_SYN_LAT=20,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1067,HLS_SYN_LUT=3156,HLS_VERSION=2023_2}" *)

module t64_CAG444toRGB888_k8 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        YUVin_dout,
        YUVin_empty_n,
        YUVin_read,
        RGBout_din,
        RGBout_full_n,
        RGBout_write
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] YUVin_dout;
input   YUVin_empty_n;
output   YUVin_read;
output  [63:0] RGBout_din;
input   RGBout_full_n;
output   RGBout_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg YUVin_read;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    YUVin_blk_n;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    RGBout_blk_n;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg   [63:0] YUVin_read_reg_112;
reg   [63:0] YUVin_read_1_reg_117;
wire   [191:0] YUV192_fu_69_p4;
reg   [191:0] YUV192_reg_122;
wire   [63:0] trunc_ln79_fu_81_p1;
reg   [63:0] p_s_reg_132;
reg   [63:0] p_0_reg_137;
wire    grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_start;
wire    grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_done;
wire    grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_idle;
wire    grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_ready;
wire   [191:0] grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_RGB192_out;
wire    grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_RGB192_out_ap_vld;
reg    grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    regslice_forward_RGBout_U_apdone_blk;
reg    ap_block_state9;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
reg    ap_ST_fsm_state7_blk;
reg    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    regslice_forward_YUVin_U_apdone_blk;
wire   [63:0] YUVin_dout_int_regslice;
wire    YUVin_empty_n_int_regslice;
reg    YUVin_read_int_regslice;
wire    regslice_forward_YUVin_U_ack_in;
reg   [63:0] RGBout_din_int_regslice;
reg    RGBout_write_int_regslice;
wire    RGBout_full_n_int_regslice;
wire    regslice_forward_RGBout_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_start_reg = 1'b0;
end

t64_CAG444toRGB888_k8_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1 grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_start),
    .ap_done(grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_done),
    .ap_idle(grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_idle),
    .ap_ready(grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_ready),
    .YUV192(YUV192_reg_122),
    .RGB192_out(grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_RGB192_out),
    .RGB192_out_ap_vld(grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_RGB192_out_ap_vld)
);

t64_CAG444toRGB888_k8_regslice_forward #(
    .DataWidth( 64 ))
regslice_forward_YUVin_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(YUVin_dout),
    .vld_in(YUVin_empty_n),
    .ack_in(regslice_forward_YUVin_U_ack_in),
    .data_out(YUVin_dout_int_regslice),
    .vld_out(YUVin_empty_n_int_regslice),
    .ack_out(YUVin_read_int_regslice),
    .apdone_blk(regslice_forward_YUVin_U_apdone_blk)
);

t64_CAG444toRGB888_k8_regslice_forward #(
    .DataWidth( 64 ))
regslice_forward_RGBout_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(RGBout_din_int_regslice),
    .vld_in(RGBout_write_int_regslice),
    .ack_in(RGBout_full_n_int_regslice),
    .data_out(RGBout_din),
    .vld_out(regslice_forward_RGBout_U_vld_out),
    .ack_out(RGBout_full_n),
    .apdone_blk(regslice_forward_RGBout_U_apdone_blk)
);

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_rst_n_inv or posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == YUVin_empty_n_int_regslice))) begin
            grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_start_reg <= 1'b1;
        end else if ((grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_ready == 1'b1)) begin
            grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        YUV192_reg_122 <= YUV192_fu_69_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        YUVin_read_1_reg_117 <= YUVin_dout_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        YUVin_read_reg_112 <= YUVin_dout_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        p_0_reg_137 <= {{grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_RGB192_out[191:128]}};
        p_s_reg_132 <= {{grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_RGB192_out[127:64]}};
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6))) begin
        RGBout_blk_n = RGBout_full_n_int_regslice;
    end else begin
        RGBout_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == RGBout_full_n_int_regslice)) begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            RGBout_din_int_regslice = p_0_reg_137;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            RGBout_din_int_regslice = p_s_reg_132;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            RGBout_din_int_regslice = trunc_ln79_fu_81_p1;
        end else begin
            RGBout_din_int_regslice = 'bx;
        end
    end else begin
        RGBout_din_int_regslice = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'b1 == RGBout_full_n_int_regslice)) | ((1'b1 == ap_CS_fsm_state7) & (1'b1 == RGBout_full_n_int_regslice)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == RGBout_full_n_int_regslice)))) begin
        RGBout_write_int_regslice = 1'b1;
    end else begin
        RGBout_write_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        YUVin_blk_n = YUVin_empty_n_int_regslice;
    end else begin
        YUVin_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == YUVin_empty_n) & (regslice_forward_YUVin_U_ack_in == 1'b1))) begin
        YUVin_read = 1'b1;
    end else begin
        YUVin_read = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state4) & (1'b1 == YUVin_empty_n_int_regslice)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == YUVin_empty_n_int_regslice)) | ((1'b1 == ap_CS_fsm_state2) & (1'b1 == YUVin_empty_n_int_regslice)))) begin
        YUVin_read_int_regslice = 1'b1;
    end else begin
        YUVin_read_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == YUVin_empty_n_int_regslice)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == YUVin_empty_n_int_regslice)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == YUVin_empty_n_int_regslice)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_done == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == RGBout_full_n_int_regslice)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == RGBout_full_n_int_regslice)) begin
        ap_ST_fsm_state7_blk = 1'b1;
    end else begin
        ap_ST_fsm_state7_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == RGBout_full_n_int_regslice)) begin
        ap_ST_fsm_state8_blk = 1'b1;
    end else begin
        ap_ST_fsm_state8_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state9)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b1 == YUVin_empty_n_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'b1 == YUVin_empty_n_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'b1 == YUVin_empty_n_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'b1 == RGBout_full_n_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'b1 == RGBout_full_n_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'b1 == RGBout_full_n_int_regslice))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'b0 == ap_block_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign RGBout_write = regslice_forward_RGBout_U_vld_out;

assign YUV192_fu_69_p4 = {{{YUVin_dout_int_regslice}, {YUVin_read_1_reg_117}}, {YUVin_read_reg_112}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state9 = ((1'b0 == RGBout_full_n_int_regslice) | (regslice_forward_RGBout_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_start = grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_ap_start_reg;

assign trunc_ln79_fu_81_p1 = grp_t64_CAG444toRGB888_k8_Pipeline_VITIS_LOOP_50_1_fu_63_RGB192_out[63:0];

endmodule //t64_CAG444toRGB888_k8
