// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module t64_nv12toCAG444_k8_t64_nv12toCAG444_k8_Pipeline_VITIS_LOOP_17_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        UVin128,
        Yin128,
        YUVout192_out,
        YUVout192_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [127:0] UVin128;
input  [127:0] Yin128;
output  [191:0] YUVout192_out;
output   YUVout192_out_ap_vld;

reg ap_idle;
reg YUVout192_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln17_fu_118_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln17_reg_350;
wire  signed [8:0] sub_ln25_fu_158_p2;
reg  signed [8:0] sub_ln25_reg_354;
wire   [191:0] shl_ln25_fu_232_p2;
reg   [191:0] shl_ln25_reg_361;
wire   [191:0] shl_ln26_fu_255_p2;
reg   [191:0] shl_ln26_reg_366;
wire   [191:0] shl_ln27_fu_278_p2;
reg   [191:0] shl_ln27_reg_371;
reg   [127:0] Yin128_1_fu_60;
wire   [127:0] zext_ln19_fu_189_p1;
wire    ap_loop_init;
wire    ap_block_pp0_stage0;
reg   [127:0] UVin128_1_fu_64;
wire   [127:0] zext_ln23_fu_217_p1;
reg   [191:0] YUVout192_fu_68;
wire   [191:0] YUVout192_1_fu_306_p2;
reg   [3:0] i_fu_72;
wire   [3:0] i_2_fu_124_p2;
reg   [3:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0_01001;
wire   [2:0] trunc_ln25_fu_130_p1;
wire   [7:0] shl_ln25_1_fu_134_p3;
wire   [5:0] shl_ln25_2_fu_146_p3;
wire   [8:0] zext_ln25_1_fu_142_p1;
wire   [8:0] zext_ln25_2_fu_154_p1;
wire   [111:0] Yin128_2_fu_179_p4;
wire   [111:0] UVin128_2_fu_207_p4;
wire   [7:0] y_fu_175_p1;
wire  signed [31:0] sext_ln25_fu_225_p1;
wire   [191:0] zext_ln25_fu_221_p1;
wire   [191:0] zext_ln25_3_fu_228_p1;
wire   [7:0] u_fu_193_p1;
wire   [8:0] add_ln26_fu_242_p2;
wire  signed [31:0] sext_ln26_fu_247_p1;
wire   [191:0] zext_ln26_fu_238_p1;
wire   [191:0] zext_ln26_1_fu_251_p1;
wire   [7:0] UVin128_4_fu_197_p4;
wire   [8:0] add_ln27_fu_265_p2;
wire  signed [31:0] sext_ln27_fu_270_p1;
wire   [191:0] zext_ln27_fu_261_p1;
wire   [191:0] zext_ln27_1_fu_274_p1;
wire   [191:0] or_ln27_fu_297_p2;
wire   [191:0] or_ln27_1_fu_301_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 Yin128_1_fu_60 = 128'd0;
#0 UVin128_1_fu_64 = 128'd0;
#0 YUVout192_fu_68 = 192'd0;
#0 i_fu_72 = 4'd0;
#0 ap_done_reg = 1'b0;
end

t64_nv12toCAG444_k8_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_rst or posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            UVin128_1_fu_64 <= UVin128;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            UVin128_1_fu_64 <= zext_ln23_fu_217_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            YUVout192_fu_68 <= 192'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            YUVout192_fu_68 <= YUVout192_1_fu_306_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            Yin128_1_fu_60 <= Yin128;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            Yin128_1_fu_60 <= zext_ln19_fu_189_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln17_fu_118_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_72 <= i_2_fu_124_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_72 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln17_reg_350 <= icmp_ln17_fu_118_p2;
        shl_ln25_reg_361 <= shl_ln25_fu_232_p2;
        shl_ln26_reg_366 <= shl_ln26_fu_255_p2;
        shl_ln27_reg_371 <= shl_ln27_fu_278_p2;
        sub_ln25_reg_354[8 : 3] <= sub_ln25_fu_158_p2[8 : 3];
    end
end

always @ (*) begin
    if (((icmp_ln17_reg_350 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        YUVout192_out_ap_vld = 1'b1;
    end else begin
        YUVout192_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_118_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_72;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign UVin128_2_fu_207_p4 = {{UVin128_1_fu_64[127:16]}};

assign UVin128_4_fu_197_p4 = {{UVin128_1_fu_64[15:8]}};

assign YUVout192_1_fu_306_p2 = (or_ln27_1_fu_301_p2 | YUVout192_fu_68);

assign YUVout192_out = YUVout192_fu_68;

assign Yin128_2_fu_179_p4 = {{Yin128_1_fu_60[127:16]}};

assign add_ln26_fu_242_p2 = ($signed(sub_ln25_reg_354) + $signed(9'd8));

assign add_ln27_fu_265_p2 = ($signed(sub_ln25_reg_354) + $signed(9'd16));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_2_fu_124_p2 = (ap_sig_allocacmp_i_1 + 4'd1);

assign icmp_ln17_fu_118_p2 = ((ap_sig_allocacmp_i_1 == 4'd8) ? 1'b1 : 1'b0);

assign or_ln27_1_fu_301_p2 = (shl_ln26_reg_366 | or_ln27_fu_297_p2);

assign or_ln27_fu_297_p2 = (shl_ln27_reg_371 | shl_ln25_reg_361);

assign sext_ln25_fu_225_p1 = sub_ln25_reg_354;

assign sext_ln26_fu_247_p1 = $signed(add_ln26_fu_242_p2);

assign sext_ln27_fu_270_p1 = $signed(add_ln27_fu_265_p2);

assign shl_ln25_1_fu_134_p3 = {{trunc_ln25_fu_130_p1}, {5'd0}};

assign shl_ln25_2_fu_146_p3 = {{trunc_ln25_fu_130_p1}, {3'd0}};

assign shl_ln25_fu_232_p2 = zext_ln25_fu_221_p1 << zext_ln25_3_fu_228_p1;

assign shl_ln26_fu_255_p2 = zext_ln26_fu_238_p1 << zext_ln26_1_fu_251_p1;

assign shl_ln27_fu_278_p2 = zext_ln27_fu_261_p1 << zext_ln27_1_fu_274_p1;

assign sub_ln25_fu_158_p2 = (zext_ln25_1_fu_142_p1 - zext_ln25_2_fu_154_p1);

assign trunc_ln25_fu_130_p1 = ap_sig_allocacmp_i_1[2:0];

assign u_fu_193_p1 = UVin128_1_fu_64[7:0];

assign y_fu_175_p1 = Yin128_1_fu_60[7:0];

assign zext_ln19_fu_189_p1 = Yin128_2_fu_179_p4;

assign zext_ln23_fu_217_p1 = UVin128_2_fu_207_p4;

assign zext_ln25_1_fu_142_p1 = shl_ln25_1_fu_134_p3;

assign zext_ln25_2_fu_154_p1 = shl_ln25_2_fu_146_p3;

assign zext_ln25_3_fu_228_p1 = $unsigned(sext_ln25_fu_225_p1);

assign zext_ln25_fu_221_p1 = y_fu_175_p1;

assign zext_ln26_1_fu_251_p1 = $unsigned(sext_ln26_fu_247_p1);

assign zext_ln26_fu_238_p1 = u_fu_193_p1;

assign zext_ln27_1_fu_274_p1 = $unsigned(sext_ln27_fu_270_p1);

assign zext_ln27_fu_261_p1 = UVin128_4_fu_197_p4;

always @ (posedge ap_clk) begin
    sub_ln25_reg_354[2:0] <= 3'b000;
end

endmodule //t64_nv12toCAG444_k8_t64_nv12toCAG444_k8_Pipeline_VITIS_LOOP_17_1
