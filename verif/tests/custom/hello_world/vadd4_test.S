/// mv.xv a0, v0.0
/// mv.xv a1, v0.1
/// mv.xv a2, v0.2
/// mv.xv a3, v0.3

/// mv.xv a4, v1.0
/// mv.xv a5, v1.1
/// mv.xv a6, v1.2
/// mv.xv a7, v1.3

/// vadd2 v2, v1, v0

/// mv.vx v2.0, t0
/// mv.vx v2.1, t1
/// mv.vx v2.2, t2
/// mv.vx v2.3, t3

  .globl main
main:
  li a0, 0x10;  // a0 ~ a7 -> x10 ~ x17
  li a1, 0x20;
  li a2, 0x30;
  li a3, 0x40;
  li a4, 0x50;
  li a5, 0x60;
  li a6, 0x70;
  li a7, 0x80;
  # Generated by parser_helper.py
  .word 0b00000000000001010001000000001011
  .word 0b00000000000101011001000000001011
  .word 0b00000000001001100001000000001011
  .word 0b00000000001101101001000000001011
  .word 0b00000000000001110001000010001011
  .word 0b00000000000101111001000010001011
  .word 0b00000000001010000001000010001011
  .word 0b00000000001110001001000010001011
  .word 0b00000010000000001000000100001011
  .word 0b00000000000000010000001010001011
  .word 0b00000000000100010000001100001011
  .word 0b00000000001000010000001110001011
  .word 0b00000000001100010000111000001011

  add a0, a0, a4;  // Add a0 and a4, store result in a0
  add a1, a1, a5;  // Add a1 and a5, store result in a1
  add a2, a2, a6;  // Add a2 and a6, store result in a2
  add a3, a3, a7;  // Add a3 and a7, store result in a3

  xor a0, a0, t0;
  bnez a0, fail;
  xor a1, a1, t1;
  bnez a1, fail;
//  xor a2, a2, t2;
//  bnez a2, fail;
//  xor a3, a3, t3;
//  bnez a3, fail;
  j pass;

fail:
  # Failure post-processing (messages, ecall setup etc.)
  li a0, 0x1;
  jal exit;

pass:
  # Success post-processing (messages, ecall setup etc.)
  li a0, 0x0;
  jal exit;

